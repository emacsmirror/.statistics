:PREAMBLE:
#+title: Epkgs: Issues
#+setupfile: .orgconfig
#+name: setup
#+begin_src emacs-lisp :results silent
  (require 'emir)
#+end_src
#+name: addheader
#+header: :var rows="" :var header=""
#+begin_src elisp :hlines yes :results none
  (epkg-add-org-header rows header)
#+end_src
[[https://emacsmirror.net/stats][up]]
:END:
* Features provided by multiple packages
:PROPERTIES:
:ID:       e4c34285-f734-4953-b929-acfc1a9c0730
:END:
#+name: conflict
#+begin_src emacs-lisp :post addheader(*this*,'("Feature" "Package" "Shelved"))
  (let (alist)
    (dolist (name (epkgs 'name))
      (dolist (feature (epkg-sql [:select feature :from provided
                                  :where (and (= package $s1)
                                              (isnull drop))]
                                 name))
        (setq feature (car feature))
        (if-let ((elt (assq feature alist)))
            (push name (cdr elt))
          (cl-pushnew (list feature name) alist))))
    (mapcar (pcase-lambda (`(,feature ,package))
              (list feature package
                    (epkg-shelved-package-p (epkg package))))
            (mapcan (pcase-lambda (`(,feature . ,providers))
                      (and (> (length providers) 1)
                           (list (list feature providers))
                           (mapcar (lambda (elt) (list feature elt))
                                   (sort providers #'string<))))
                    (cl-sort alist #'string< :key #'car))))
#+end_src
#+results: conflict

* Packages with unsatisfied dependencies
:PROPERTIES:
:ID:       df7b903f-ebf1-4803-aa97-1a4eac38b08f
:END:
#+name: unsatisfied
#+begin_src emacs-lisp :post addheader(*this*,'("Package" "Class" "Feature" "Provider"))
  (mapcan
   (pcase-lambda (`(,name ,class))
     (let (alist)
       (pcase-dolist (`(,feature)
                      (epkg-sql [:select feature :from required
                                 :where (and (= package $s1)
                                             (isnull drop))]
                                name))
         (if-let ((provider (epkg-provided-by feature)))
             (when (epkg-sql [:select class :from packages
                              :where (and (= name $s1)
                                          (= class 'shelved))]
                             provider)
               (push (list feature provider) alist))
           (push (list feature nil) alist)))
       (mapcar (pcase-lambda (`(,feature ,provider))
                 (list name class feature provider))
               (cl-sort alist #'string< :key #'car))))
   (epkgs [name class] [mirrored*]))
#+end_src
#+results: unsatisfied
| Package (3) | Class  | Feature          | Provider |
|-------------+--------+------------------+----------|
| ewal        | github | spacemacs-common |          |
| muse        | github | assoc            |          |
| navorski    | github | assoc            |          |

- assoc:
  - https://github.com/alexott/muse/issues/13 (has dependants)
  - https://github.com/roman/navorski.el/issues/11 (pr) (in melpa)
- ewal: https://github.com/cyruseuros/ewal/issues/4

* Missing library summary
:PROPERTIES:
:ID:       1fa0f49e-3f96-446a-a9ad-048591c91dd0
:END:
#+name: missing-summary
#+begin_src emacs-lisp :post addheader(*this*,'("Package" "Class" "M"))
  (mapcar (pcase-lambda (`(,name ,class))
            (list name class
                  (and (epkg-get-recipe 'melpa name) "âœ“")))
          (epkg-sql [:select [name class]
                     :from packages
                     ;;:where (isnull commentary)
                     :where (and (isnull summary)
                                 (not (= class 'builtin))
                                 (not (= class 'shelved)))
                     :order-by [(asc name)]]))
#+end_src
#+results: missing-summary
