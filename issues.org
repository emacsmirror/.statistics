#+SETUPFILE: .orgconfig
#+NAME: setup
#+BEGIN_SRC emacs-lisp :results silent
  (require 'emir)
#+END_SRC
[[https://emacsmirror.net/stats][up]]
* Features provided by multiple packages
#+NAME: conflict
#+BEGIN_SRC emacs-lisp
  (let (alist)
    (dolist (name (epkgs 'name))
      (dolist (feature (epkg-sql [:select feature :from provided
                                  :where (and (= package $s1)
                                              (isnull drop))]
                                 name))
        (setq feature (car feature))
        (-if-let (elt (assq feature alist))
            (push name (cdr elt))
          (cl-pushnew (list feature name) alist))))
    (epkg-with-org-header ("Feature" "Package" "Shelved")
      (mapcar (-lambda ((feature package))
                (list feature package
                      (epkg-shelved-package-p (epkg package))))
              (-mapcat (-lambda ((feature . providers))
                         (and (> (length providers) 1)
                              (list (list feature providers))
                              (--map (list feature it)
                                     (sort providers #'string<))))
                       (cl-sort alist #'string< :key #'car)))))
#+END_SRC
#+RESULTS: conflict
| Feature (2)  | Package         | Shelved |
|--------------+-----------------+---------|
| test-helper  | cerbere         |         |
| test-helper  | mocha           |         |
| test-support | buttercup-junit |         |
| test-support | ert-junit       |         |

- https://github.com/nlamirault/cerbere/issues/5
- https://github.com/scottaj/mocha.el/issues/62
- https://bitbucket.org/olanilsson/ert-junit/issues/6

* Packages with unsatisfied dependencies
#+NAME: unsatisfied
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Class" "Feature" "Provider")
    (-mapcat
     (-lambda ((name class))
       (let (alist)
	 (-each (epkg-sql [:select feature :from required
                           :where (and (= package $s1)
                                       (isnull drop))]
                          name)
           (-lambda ((feature))
             (-if-let (provider (epkg-provided-by feature))
		 (when (epkg-sql [:select class :from packages
                                  :where (and (= name $s1)
                                              (= class 'shelved))]
				 provider)
                   (push (list feature provider) alist))
               (push (list feature nil) alist))))
	 (mapcar (-lambda ((feature provider))
                   (list name class feature provider))
		 (cl-sort alist #'string< :key #'car))))
     (epkgs [name class] 'epkg-mirrored-package--eieio-childp)))
#+END_SRC
#+RESULTS: unsatisfied
| Package (2) | Class  | Feature         | Provider |
|-------------+--------+-----------------+----------|
| ada-mode    | elpa   | project-patches |          |
| lsp-p4      | github | lsp-common      |          |

- lsp-p4: https://github.com/dmakarov/p4ls/issues/2
