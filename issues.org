:PREAMBLE:
#+TITLE: Epkgs: Issues
#+SETUPFILE: .orgconfig
#+NAME: setup
#+BEGIN_SRC emacs-lisp :results silent
  (require 'emir)
#+END_SRC
[[https://emacsmirror.net/stats][up]]
:END:
* Features provided by multiple packages
#+NAME: conflict
#+BEGIN_SRC emacs-lisp
  (let (alist)
    (dolist (name (epkgs 'name))
      (dolist (feature (epkg-sql [:select feature :from provided
                                  :where (and (= package $s1)
                                              (isnull drop))]
                                 name))
        (setq feature (car feature))
        (if-let ((elt (assq feature alist)))
            (push name (cdr elt))
          (cl-pushnew (list feature name) alist))))
    (epkg-with-org-header ("Feature" "Package" "Shelved")
      (mapcar (pcase-lambda (`(,feature ,package))
                (list feature package
                      (epkg-shelved-package-p (epkg package))))
              (mapcan (pcase-lambda (`(,feature . ,providers))
                        (and (> (length providers) 1)
                             (list (list feature providers))
                             (mapcar (lambda (elt) (list feature elt))
                                     (sort providers #'string<))))
                      (cl-sort alist #'string< :key #'car)))))
#+END_SRC
#+RESULTS: conflict
| Feature (2)          | Package | Shelved |
|----------------------+---------+---------|
| mime-view            | semi    |         |
| mime-view            | w3m     |         |
| targets/install-deps | gumshoe |         |
| targets/install-deps | ivy     |         |

* Packages with unsatisfied dependencies
#+NAME: unsatisfied
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Class" "Feature" "Provider")
    (mapcan
     (pcase-lambda (`(,name ,class))
       (let (alist)
         (pcase-dolist (`(,feature)
                        (epkg-sql [:select feature :from required
                                   :where (and (= package $s1)
                                               (isnull drop))]
                                  name))
           (if-let ((provider (epkg-provided-by feature)))
               (when (epkg-sql [:select class :from packages
                                :where (and (= name $s1)
                                            (= class 'shelved))]
                               provider)
                 (push (list feature provider) alist))
             (push (list feature nil) alist)))
         (mapcar (pcase-lambda (`(,feature ,provider))
                   (list name class feature provider))
                 (cl-sort alist #'string< :key #'car))))
     (epkgs [name class] 'epkg-mirrored-package--eieio-childp)))
#+END_SRC
#+RESULTS: unsatisfied

* Packages whose repositories have been archived
Don't forget to update ~emir--archived-packages~ occasionally.
#+NAME: archived
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Repository" "M" "Reverse Dependencies")
    (cl-sort
     (-keep (lambda (name)
              (and (member name emir--archived-packages)
                   (not (assoc name emir-kept-packages))
                   (list name
                         (epkg-org-link name)
                         ;; (and (melpa-get name) "✓")
                         (and (melpa-get name) (oref (epkg name) downloads))
                         (mapconcat (pcase-lambda (`(,name . ,_features)) name)
                                    (epkg-reverse-dependencies name) " "))))
            (epkgs 'name 'epkg-mirrored-package--eieio-childp))
     #'string< :key #'car))
#+END_SRC
#+RESULTS: archived

* Github repositories that were moved or removed
Don't forget to update ~emir--moved-packages~ occasionally.
#+NAME: github-moved
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Old repository" "New repository" "M")
    (mapcar (pcase-lambda (`(,name ,old ,new))
              (and (epkg name)
                   (list name old new
                         ;;(and (melpa-get name) (oref (epkg name) downloads))))
                         (and (melpa-get name) "✓"))))
            (cl-sort (copy-sequence emir--moved-packages)
                     #'string< :key #'cadr)))
#+END_SRC
#+RESULTS: github-moved

* Missing library summary
#+NAME: missing-summary
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Class" "M")
    (mapcar (pcase-lambda (`(,name ,class))
              (list name class
                    (and (melpa-get name) "✓")))
            (epkg-sql [:select [name class]
                       :from packages
                       ;;:where (isnull commentary)
                       :where (and (isnull summary)
                                   (not (= class 'builtin))
                                   (not (= class 'shelved)))
                       :order-by [(asc name)]])))
#+END_SRC
#+RESULTS: missing-summary
| Package (5)       | Class   | M |
|-------------------+---------+---|
| arc-dark-theme    | github  | ✓ |
| evil-escape       | github  | ✓ |
| icons-in-terminal | github  |   |
| jabber            | github  | ✓ |
| zeitgeist         | subtree |   |

- arc-dark-theme: https://github.com/cfraz89/arc-dark-theme/pull/2
- evil-escape: https://github.com/syl20bnr/evil-escape/pull/98
- icons-in-terminal: https://github.com/sebastiencs/icons-in-terminal/pull/40
- jabber: https://github.com/legoscia/emacs-jabber/pull/38
- zeitgeist: https://gitlab.freedesktop.org/zeitgeist/zeitgeist-datasources/-/merge_requests/1
