:PREAMBLE:
#+TITLE: Epkgs: Issues
#+SETUPFILE: .orgconfig
#+NAME: setup
#+BEGIN_SRC emacs-lisp :results silent
  (require 'emir)
#+END_SRC
[[https://emacsmirror.net/stats][up]]
:END:
* Features provided by multiple packages
#+NAME: conflict
#+BEGIN_SRC emacs-lisp
  (let (alist)
    (dolist (name (epkgs 'name))
      (dolist (feature (epkg-sql [:select feature :from provided
                                  :where (and (= package $s1)
                                              (isnull drop))]
                                 name))
        (setq feature (car feature))
        (-if-let (elt (assq feature alist))
            (push name (cdr elt))
          (cl-pushnew (list feature name) alist))))
    (epkg-with-org-header ("Feature" "Package" "Shelved")
      (mapcar (-lambda ((feature package))
                (list feature package
                      (epkg-shelved-package-p (epkg package))))
              (-mapcat (-lambda ((feature . providers))
                         (and (> (length providers) 1)
                              (list (list feature providers))
                              (--map (list feature it)
                                     (sort providers #'string<))))
                       (cl-sort alist #'string< :key #'car)))))
#+END_SRC
#+RESULTS: conflict

Reoccuring issues:
- test-helper (see [[https://github.com/rejeep/ert-runner.el/issues/38][ert-runner#38]])

* Packages with unsatisfied dependencies
#+NAME: unsatisfied
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Class" "Feature" "Provider")
    (-mapcat
     (-lambda ((name class))
       (let (alist)
	 (-each (epkg-sql [:select feature :from required
                           :where (and (= package $s1)
                                       (isnull drop))]
                          name)
           (-lambda ((feature))
             (-if-let (provider (epkg-provided-by feature))
		 (when (epkg-sql [:select class :from packages
                                  :where (and (= name $s1)
                                              (= class 'shelved))]
				 provider)
                   (push (list feature provider) alist))
               (push (list feature nil) alist))))
	 (mapcar (-lambda ((feature provider))
                   (list name class feature provider))
		 (cl-sort alist #'string< :key #'car))))
     (epkgs [name class] 'epkg-mirrored-package--eieio-childp)))
#+END_SRC
#+RESULTS: unsatisfied
| Package (1) | Class  | Feature        | Provider |
|-------------+--------+----------------+----------|
| bts         | github | pophint-config |          |

- bts: https://github.com/aki2o/emacs-bts/pull/17

* Packages whose repositories have been archived
#+NAME: archived
#+BEGIN_SRC emacs-lisp
  (epkg-with-org-header ("Package" "Repository" "Melpa" "Reverse Dependencies")
    (cl-sort
     (-keep (lambda (name)
              (and (member name emir--archived-packages)
                   (list name
                         (epkg-org-link name)
                         (and (melpa-get name)
                              ;; (oref (epkg name) downloads)
                              "✓"
                              )
                         (mapconcat (pcase-lambda (`(,name . ,_features)) name)
                                    (epkg-reverse-dependencies name) " "))))
            (epkgs 'name 'epkg-mirrored-package--eieio-childp))
     #'string< :key #'cadr))
#+END_SRC
#+RESULTS: archived
| Package (16)                 | Repository                           | Melpa | Reverse Dependencies    |
|------------------------------+--------------------------------------+-------+-------------------------|
| ghc                          | [[https://github.com/DanielG/ghc-mod][DanielG/ghc-mod]]                      | ✓     | company-ghc helm-ghc    |
| chicken-scheme               | [[https://github.com/dleslie/chicken-scheme.el][dleslie/chicken-scheme.el]]            | ✓     |                         |
| ido-complete-space-or-hyphen | [[https://github.com/doitian/ido-complete-space-or-hyphen][doitian/ido-complete-space-or-hyphen]] | ✓     |                         |
| iy-go-to-char                | [[https://github.com/doitian/iy-go-to-char][doitian/iy-go-to-char]]                | ✓     |                         |
| love-minor-mode              | [[https://github.com/ejmr/love-minor-mode][ejmr/love-minor-mode]]                 | ✓     |                         |
| php-auto-yasnippets          | [[https://github.com/emacs-php/php-auto-yasnippets][emacs-php/php-auto-yasnippets]]        | ✓     |                         |
| github-issues                | [[https://github.com/inkel/github-issues.el][inkel/github-issues.el]]               | ✓     | git-commit-insert-issue |
| rsense                       | [[https://github.com/m2ym/rsense][m2ym/rsense]]                          | ✓     |                         |
| image+                       | [[https://github.com/mhayashi1120/Emacs-imagex][mhayashi1120/Emacs-imagex]]            | ✓     | evil-collection         |
| ivy-yasnippet                | [[https://github.com/mkcms/ivy-yasnippet][mkcms/ivy-yasnippet]]                  | ✓     |                         |
| phpcbf                       | [[https://github.com/nishimaki10/emacs-phpcbf][nishimaki10/emacs-phpcbf]]             | ✓     |                         |
| pipenv                       | [[https://github.com/pwalsh/pipenv.el][pwalsh/pipenv.el]]                     | ✓     |                         |
| o-blog                       | [[https://github.com/renard/o-blog][renard/o-blog]]                        | ✓     |                         |
| flymake-cppcheck             | [[https://github.com/senda-akiha/flymake-cppcheck][senda-akiha/flymake-cppcheck]]         | ✓     |                         |
| flymake-google-cpplint       | [[https://github.com/senda-akiha/flymake-google-cpplint][senda-akiha/flymake-google-cpplint]]   | ✓     |                         |
| flymake-phpcs                | [[https://github.com/senda-akiha/flymake-phpcs][senda-akiha/flymake-phpcs]]            | ✓     | drupal-mode             |

Don't forget to update ~emir--archived-packages~ occasionally.
